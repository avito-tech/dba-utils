#!/bin/bash

# archive_cmd
# Transfers WALs to two archive hosts:
# [ master: archive_cmd ] -> [ archive1: archive_remote_cmd ] -> [ archive2: scp ].
# archive_cmd writes on either of DST-HOSTNAMEs.
# And with the help of archive_remote_cmd to remote host
# archive_remote_cmd (on the 1st archive) saves WAL and tries to transfer WAL to SYNC-HOST.
# If archive_cmd can't write WAL on first host with archive_remote_cmd,  then after N retries,
# and continues to write on the second host during N seconds (cooldown_time).

set -e
set -o pipefail

error_handler() {
    scriptname=$(basename $0)
    hostname=$(hostname)
    echo "^^^ ERROR at [host: '${hostname}', file: '${scriptname}', line: '${BASH_LINENO[0]}']"
}
trap error_handler ERR

pmax=4  # the number of compressing threads
remote_cmd=/usr/local/bin/archive_remote_cmd_2
local_lastlog="/var/lib/postgresql/LASTLOG" # local copy of the file with the name of  last successfully sent file

cmd_timeout="6"   # parameter with timeout (for ssh/cat/compress)
ssh_timeout_options="-o ConnectTimeout=10 -o ServerAliveInterval=6 -o ServerAliveCountMax=5"
ssh_options="-o Compression=no -c aes128-gcm@openssh.com -o BatchMode=yes ${ssh_timeout_options}"
ssh_master_socket='/tmp/ssh_%h_%p_%r'
ssh_master_options='-o ControlMaster=auto -o ControlPersist=yes'
use_ssh_persist=yes
pwals=5
ready_wals_for_parallel=10   # ready-wals must be at least twice greater than pwals

retry_count="6"     # see below
cooldown_time="600" # do not try to send file to $dst_host1 for a '$cooldown_time' seconds after '$retry_count' attemps

unset LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES LC_TIME LC_NUMERIC
export LC_ALL=C
 
dst_hosts="$1"
dst_dir="$2"
src_file="$3"
fname="$4"
cluster_name="$5"
src_dir=${src_file%/$fname}
arch_status_dir="$src_dir"/archive_status
tmp_dir=/tmp

if [ -f /etc/default/archive_cmd ]; then
    . /etc/default/archive_cmd
fi

if [ -n "$use_ssh_persist" ]; then
    ssh_options="$ssh_options -S $ssh_master_socket $ssh_master_options"
fi

if [ -z "$dst_hosts" -o -z "$dst_dir" -o -z "$src_file" -o -z "$fname" -o -z "$cluster_name" ]; then
    echo -e "usage: archive_cmd 'DST-HOSTNAMES' DST-DIR SRC-WAL-FILENAME-WITH-PATH SRC-WAL-FILENAME\n" \
        "\n" \
        "DST-HOSTNAMES              - two archive host names in single quotes\n" \
        "DST-DIR                    - archive directory for WALs (ssh path)\n" \
        "SRC-WAL-FILENAME-WITH-PATH - %p (file name with path)\n" \
        "SRC-WAL-FILENAME           - %f (file name)\n" \
        "CLUSTER-NAME               - unique cluster name\n"
    exit 1
fi

dst_hosts_array=( $dst_hosts )
dst_host0=${dst_hosts_array[0]} # first host from list
dst_host1=${dst_hosts_array[1]} # second (reserve) host

# checks if file name is WAL name
is_wal() {
    local fname="$1"
    if [[ "$fname" == ???????????????????????? ]] && [[ "$fname" != *.* ]]; then
        return 0 # zero is true
    else
        return 1 # non-zero is false
    fi
}

# transfers WAL to archive with ssh
send_wal() {
    local fname_with_path="$1"
    local file_name="$2"
    local dir=$dst_dir
    local ftime fsize
    IFS='|' read -r ftime fsize <<<"$(stat -c '%y|%s' "$fname_with_path")"

    # LASTLOG put in another catalog
    if [ "$file_name" = "LASTLOG" ]; then
        # this part can’t be executed in parallel neither here nor in remote_cmd
        dir="${dst_dir}/.."
    fi

    timeout ${cmd_timeout} cat "$fname_with_path"                                   \
        | timeout ${cmd_timeout} ssh $ssh_options "$current_dst_host" "$remote_cmd" \
                  "$dir" "$file_name" "'$ftime'"                                    \
                  "''" "$pmax" "$cluster_name"                                      \
                  "'$sync_host'" "'$fsize'"
}

# increments error counter for  $dst_host0 in file  (ignore $dst_host1)
increment_wal_errors_cnt() {
    local was_failed_cnt
    [ "$current_dst_host" = "$dst_host1" ] && return 0

    if [[ -f "${tmp_dir}/send_wal_errors_cnt_${dst_host0}_" ]]; then
        was_failed_cnt=$(<"${tmp_dir}/send_wal_errors_cnt_${dst_host0}_")
        was_failed_cnt=$(( was_failed_cnt + 1 ))
        echo "$was_failed_cnt" > "${tmp_dir}/send_wal_errors_cnt_${dst_host0}_"
    else
        echo 1 > "${tmp_dir}/send_wal_errors_cnt_${dst_host0}_"
    fi
}

# sets current  $current_dst_host value to one on which to send files
# first check if we should try to send file to $dst_host0  or directly send it to $dst_host1
if [ -f "${tmp_dir}/send_wal_errors_cnt_${dst_host0}_" ]; then
    was_failed_cnt=$(<"${tmp_dir}/send_wal_errors_cnt_${dst_host0}_")
    if [ "$was_failed_cnt" -lt "$retry_count" ]; then
        current_dst_host="$dst_host0"
    # having reached $retry_count, don’t try to write WAL to $dst_host0  during $cooldown_time seconds
    # instead of it switch to  $dst_host1  during $cooldown_time seconds
    else
        now_time=$(date +%s)
        last_err_time=$(stat -c%Y "${tmp_dir}/send_wal_errors_cnt_${dst_host0}_")
        if [[ $(( $now_time - $last_err_time)) -le $cooldown_time ]]; then
            # try to write to dst_host1
            current_dst_host="$dst_host1"
        # try to write to 1st host after $cooldown_time and reset error counter
        else
            rm "${tmp_dir}/send_wal_errors_cnt_${dst_host0}_"
            current_dst_host="$dst_host0"
        fi
    fi
else
    # there is no error file, so send to 1st host
    current_dst_host="$dst_host0"
fi

# set sync_host  parameter for archive_remote_cmd
# if 1st is down, don’t sync to 2nd archive server
if [ "$current_dst_host" = "$dst_host0" ]; then
    sync_host="$dst_host1"
else
    sync_host=''
fi

# checks if that file has already been sent to archive by reading local LASTLOG
if [[ -r "$local_lastlog" ]]; then
    prev_archived=$(< ${local_lastlog})
else
    prev_archived=""
fi
# files like  '000000010004EF04000000E1.00010DF0.backup' and '00000015.history'  are always archived together
# compare only WAL
# If previously archived file is not WAL, execute archiving procedure in one thread to make it possible to run a compare operation ('<')
if is_wal "$fname" && is_wal "$prev_archived"; then
    if [[ "$fname" < "$prev_archived" ]] || [[ "$fname" = "$prev_archived" ]]; then
        echo "File '$fname' was already sent to archive. Skipping..."
        exit 0
    fi
fi

# should we turn on multi thread archiving
ready_count=$(find ${arch_status_dir}/ -maxdepth 1 -type f -name "????????????????????????.ready" | wc -l)

# archive with one thread if:
# - ready WAL files number is lower than the threshold ready_wals_for_parallel
# - it is not WAL file (.backup, .history)
# - previously archived file is not WAL file
if [[ $ready_count -le $ready_wals_for_parallel ]] || ! is_wal "$fname" || ! is_wal "$prev_archived"; then
    exit_code=0
    send_wal "$src_file" "$fname" || exit_code=$?
    if [[ $exit_code -ne 0 ]] ; then
        echo "ERROR: can't send '$fname' to archive host '$current_dst_host'. Exit code: '$exit_code'"
        increment_wal_errors_cnt
        exit 1
    fi
    wal=$fname
else
    # turn on parallel archiving

    # take pwals number of WAL files
    ready_wals=$(find ${arch_status_dir}/ -maxdepth 1 -type f -name "????????????????????????.ready" -printf '%f\n'\
                        | sort | grep -A "$(( pwals - 1 ))" -F ${fname})

    # archive these WAL files in parallel
    declare -A send_pids
    for wal_ready in $ready_wals ; do
        wal=${wal_ready%.ready}
        send_wal "$src_dir"/"$wal" "$wal" & send_pids[$wal]=$!
    done

    # check exit code for each thread
    for wal_pid in ${!send_pids[@]}; do
        exit_code=0
        wait ${send_pids[$wal_pid]} || exit_code=$?
        if [[ $exit_code -ne 0 ]] ; then
            echo "ERROR: can't send '$wal_pid' to archive host '$current_dst_host'. Exit code: '$exit_code'"
            increment_wal_errors_cnt
            exit 1
        fi
    done
fi

# save LASTLOG locally
echo "$wal" > "$local_lastlog"
# send LASTLOG to remote server
send_wal "$local_lastlog" "LASTLOG"

exit 0

