#!/bin/bash

# archive_remote_cmd is executed on archive servers
# Saves WALs and associated files to the host on which it is run and to the SYNC-HOST (if it’s set).
# At SYNC-HOST executes itself, without REMOTE-COMPRESS, as WALs have been already compressed.

set -e
set -o pipefail

error_handler() {
    scriptname=$(basename $0)
    hostname=$(hostname)
    echo "^^^ ERROR at [host: '${hostname}', file: '${scriptname}', line: '${BASH_LINENO[0]}']"
}
trap error_handler ERR

remote_cmd=/usr/local/bin/archive_remote_cmd_2 # itslef

dst_dir="$1"
fname_org="$2"
ftime="$3"
skip_compress="$4"
pmax="$5"
cluster_name="$6"
sync_host="$7"        # second wal archive server hostname
fsize="$8"            # source file size
fname=$fname_org
tmp_dir="/lib/init/rw/pg_recv_sb/$cluster_name" # tmpfs for wals

# options for sending WAL to second archive host
cmd_timeout="6"   # timeout parameter for ssh, cat
ssh_timeout_options="-o ConnectTimeout=10 -o ServerAliveInterval=6 -o ServerAliveCountMax=5"
ssh_options="-o Compression=no -c aes128-gcm@openssh.com -o BatchMode=yes ${ssh_timeout_options}"
ssh_master_socket='/tmp/ssh_%h_%p_%r'
ssh_master_options='-o ControlMaster=auto -o ControlPersist=yes'
ssh_options="$ssh_options -o ControlPath=$ssh_master_socket $ssh_master_options"
cooldown_time="600" # don’t try to send files to $sync_host after an error during $cooldown_time seconds

recv_checked() {
    local timeout=$1
    local fname=$2
    local fsize=$3
    local res=0
    local received

    timeout "${timeout}" cat > "$fname" || res=$?
    received=$(stat -c '%s' "$fname")

    # zero file size not supported
    if (( res || ! received || received != fsize )); then
        mv "$fname" "$fname".bad
        echo "ERROR: $fname.bad size $received, expected $fsize bytes, cat exit $res"
        exit 1
    fi
}

if [ -z "$dst_dir" -o -z "$fname" -o -z "$cluster_name" -o -z "$fsize" ]; then
    cat <<'EOF'
usage: archive_remote_cmd DST-DIR DST-WAL-FILENAME SRC-FILE-TIMESTAMP SKIP-COMPRESS PMAX CLUSTER-NAME SYNC-HOST SIZE
DST-DIR                    - archive directory for WALs
DST-WAL-FILENAME           - %f (file name)
SRC-FILE-TIMESTAMP         - date and time of src WAL file in 'touch --date' format
SKIP-COMPRESS              - received file is compressed, skip compress it
PMAX                       - if SKIP-COMPRESS empty - use PMAX compress threads
CLUSTER-NAME               - unique cluster name
SYNC-HOST                  - host to mirror WAL (upload via ssh), may be empty
SIZE                       - source file size for check receive
EOF
    exit 1
fi

if [ -f /etc/default/archive_remote_cmd ]; then
    . /etc/default/archive_remote_cmd
fi

if ! [ -d "$tmp_dir" ]; then
    mkdir -p "$tmp_dir"
fi

# don’t overwrite previously saved files with wrong md5
if [ -f "$tmp_dir"/"$fname_org".bad_md5 ]; then
    echo "ERROR: $dst_dir/$fname_org already exist with different md5"
    exit 1
fi

# if there is the same WAL file in archchive, check md5
if [ -f "$dst_dir"/"$fname_org" ] && [ "$fname_org" != "LASTLOG" ]; then
    recv_checked "${cmd_timeout}" "$tmp_dir"/"$fname_org".dup "$fsize"
    md5_dup=`md5sum "$tmp_dir"/"$fname_org".dup | awk '{print $1}'`
    if [[ $fname == ???????????????????????? && ! $skip_compress ]]; then
        # uncompress file from archive to compare its md5 value
        pbzip2 -d -p"$pmax" < "$dst_dir"/"$fname_org" > "$tmp_dir"/"$fname_org".org
        md5_orig=`md5sum "$tmp_dir"/"$fname_org".org | awk '{print $1}'`
        rm "$tmp_dir"/"$fname_org".org
    else
        md5_orig=`md5sum "$dst_dir"/"$fname_org" | awk '{print $1}'`
    fi
    if [[ $md5_orig != $md5_dup ]]; then
        echo "ERROR: $dst_dir/$fname_org already exist with different md5"
        # save the compressed copy with another md5 value for analyze purpose
        mv "$tmp_dir"/"$fname_org".dup "$tmp_dir"/"$fname_org".bad_md5
        touch --no-create --date "$ftime" "$tmp_dir"/"$fname_org".bad_md5 || true # ignore errors
        exit 1
    else
        # if md5 values match, then exit without error
        echo "WARN: $dst_dir/$fname_org already exist with same md5"
        rm "$tmp_dir"/"$fname_org".dup
        exit 0
    fi
fi

if [ -f "$dst_dir"/"$fname".tmp ]; then
    echo "ERROR: $dst_dir/$fname.tmp already exist"
    exit 1
fi

# to skip errors of recovering partial file
# which is being archived (still in progress), let’s atomically create file in archive
# with the help of move
if [[ $fname == ???????????????????????? && ! $skip_compress ]]; then
    recv_checked "${cmd_timeout}" "$tmp_dir"/"$fname".new "$fsize"
    pbzip2 -1 -p"$pmax" < "$tmp_dir"/"$fname".new > "$dst_dir"/"$fname".tmp
    rm "$tmp_dir"/"$fname".new
else
    recv_checked "${cmd_timeout}" "$dst_dir"/"$fname".tmp "$fsize"
fi

touch --no-create --date "$ftime" "$dst_dir"/"$fname".tmp || true # ignore errors

mv "$dst_dir"/"$fname".tmp "$dst_dir"/"$fname"

# if 'coreutils-sync' is installed, fsync file and folder
if [ -f "/usr/local/bin/sync" ]; then
    /usr/local/bin/sync "$dst_dir"/"$fname"
    /usr/local/bin/sync "$dst_dir"
else
    sync "$dst_dir"/"$fname"
    sync "$dst_dir"
fi

# check if it the time to start retrying writing to second archive ($cooldown_time passed)
if [ -f "${tmp_dir}"/"sync_wal_error_flag" ]; then
    now_time=$(date +%s)
    last_err_time=$(stat -c%Y "${tmp_dir}"/"sync_wal_error_flag")

    if [[ $(( $now_time - $last_err_time)) -le $cooldown_time ]]; then
        sync_host=
    fi
fi
# try to transfer file to second archive
if ! [ -z "$sync_host" ]; then
    size_compressed=$(stat -c '%s' "$dst_dir"/"$fname")
    set +e
    exit_code=0
    timeout ${cmd_timeout} cat "$dst_dir"/"$fname"                              \
        | timeout ${cmd_timeout} ssh $ssh_options "$sync_host" "$remote_cmd"    \
                  "$dst_dir" "$fname" "'$ftime'"                                \
                  "'skip'" "$pmax" "$cluster_name"                              \
                  "''" "'$size_compressed'"
    exit_code=$?
    set -e
    if [[ $exit_code -ne 0 ]] ; then
        echo "ERROR: can't sync file '$fname' to host '$sync_host'"
        touch "${tmp_dir}"/"sync_wal_error_flag"
    fi
fi

exit 0

