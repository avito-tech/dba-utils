#!/bin/bash

set -e
pmax=4
remote_cmd=/usr/local/bin/archive_remote_cmd
ssh_options="-o Compression=no -c aes128-gcm@openssh.com -o BatchMode=yes"
ssh_master_socket='/tmp/ssh_%h_%p_%r'
ssh_master_options='-o ControlMaster=auto -o ControlPersist=yes'
use_ssh_persist=
remote_compress=
send_status=
pwals=5
ready_wals_for_parallel=10   # ready WALs should be at least twice greater than pwals

unset LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES LC_TIME LC_NUMERIC
export LC_ALL=C
 
if [ -f /etc/default/archive_cmd ]; then
    . /etc/default/archive_cmd
fi

if [ -n "$use_ssh_persist" ]; then
    ssh_options="$ssh_options -S $ssh_master_socket $ssh_master_options"
fi

dst_host="$1"
dst_dir="$2"
log_dir="$dst_dir"/../
src_file="$3"
fname="$4"
src_dir=${src_file%/$fname}
arch_status_dir="$src_dir"/archive_status

if [ -z "$dst_host" -o -z "$dst_dir" -o -z "$src_file" -o -z "$fname" ]; then
    echo -e "usage: archive_cmd DST-HOSTNAME DST-DIR SRC-WAL-FILENAME-WITH-PATH SRC-WAL-FILENAME\n" \
	"\n" \
	"DST-HOSTNAME               - for scp\n" \
	"DST-DIR                    - archive directory for WALs\n" \
	"SRC-WAL-FILENAME-WITH-PATH - %p (file name with path)\n" \
	"SRC-WAL-FILENAME           - %f (file name)\n"
    exit 1
fi

set -o pipefail

# checks if the file name is WAL file name
is_wal() {
    local fname="$1"
    if [[ "$fname" == ???????????????????????? ]] && [[ "$fname" != *.* ]]; then
        return 0 # zero is true
    else
        return 1 # non-zero is false
    fi
}

# transfers WAL to standby using ssh
send_wal() {
    local fname_with_path="$1"
    local file_name="$2"
    ftime=$(stat -c %y "$fname_with_path")
    # compress only WAL files, skip compressing of  backup label и history  files
    if [[ "$file_name" == ???????????????????????? && -z "$remote_compress" ]]; then
        pbzip2 -1 -p"$pmax" < "$fname_with_path"
    else
        cat "$fname_with_path"
    fi \
        | ssh $ssh_options "$dst_host" "$remote_cmd" "$dst_dir" "$file_name" "'$ftime'" "'$remote_compress'" "$pmax" "'$send_status'"
    /usr/local/bin/vmtouch -q -e "$fname_with_path"
}

# check the  existence of WAL file in the archive
if [[ -r ${log_dir}/LASTLOG ]]; then
    prev_archived=$(< ${log_dir}/LASTLOG)
else
    prev_archived=""
fi
# files like '000000010004EF04000000E1.00010DF0.backup' and '00000015.history' are always archived
# compare only WAL files
# if last archived file is not WAL, then single thread archiving (for correct comparing with the help of '<')
if is_wal "$fname" && is_wal "$prev_archived"; then
    if [[ "$fname" < "$prev_archived" ]] || [[ "$fname" = "$prev_archived" ]]; then
        echo "File '$fname' was already sent to archive. Skipping..."
        exit 0
    fi
fi

# is multi-thread archiving needed?
ready_count=$(find ${arch_status_dir}/ -maxdepth 1 -type f -name "????????????????????????.ready" | wc -l)

# single thread archive if:
# - ready WAL files cnt is less than threshold “ready_wals_for_parallel “
# - file is not WAL (.backup, .history)
# - previous archived file is not WAL file
if [[ $ready_count -le $ready_wals_for_parallel ]] || ! is_wal "$fname" || ! is_wal "$prev_archived"; then
    send_wal "$src_file" "$fname"
    wal=$fname
else
    # run multi-threaded archiving

    # take pwals files
    ready_wals=$(find ${arch_status_dir}/ -maxdepth 1 -type f -name "????????????????????????.ready" -printf '%f\n'\
                        | sort | grep -A "$(( pwals - 1 ))" -F ${fname})

    # multi-threaded file transfer
    declare -A send_pids
    for wal_ready in $ready_wals ; do
        wal=${wal_ready%.ready}
        send_wal "$src_dir"/"$wal" "$wal" & send_pids[$wal]=$!
    done

    # for each thread check exit code
    for wal_pid in ${!send_pids[@]}; do
        exit_code=0
        wait ${send_pids[$wal_pid]} || exit_code=$?
        if [[ $exit_code -ne 0 ]] ; then
            echo "ERROR: can't send '$wal_pid' to archive. Exit code: '$exit_code'"
            exit 1
        fi
    done
fi

echo "$wal" > "$log_dir"/LASTLOG

exit 0
